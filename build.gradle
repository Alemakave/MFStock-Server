import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

sourceCompatibility = 11
targetCompatibility = 11
compileJava.options.encoding = 'UTF-8'

group 'ru.alemakave.mfstock.server'
version '0.3.1-ALPHA'

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.4.1"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'com.google.zxing', name: 'javase', version: '3.5.1'
    implementation group: 'com.google.zxing', name: 'core', version: '3.5.1'
    implementation group: 'org.jxls', name: 'jxls-poi', version: '2.12.0'
    implementation 'com.itextpdf:itextpdf:5.5.13.2'
    implementation 'org.jsoup:jsoup:1.17.2'
    implementation files(projectDir.absolutePath + "/src/main/resources/libs/com/jacob/1.20/jacob-1.20.jar")
    implementation files(projectDir.absolutePath + "/src/main/resources/libs/com/jacob/1.20/jacob-1.20-x64.dll")

    implementation 'com.google.guava:guava:32.1.3-jre'

    implementation("com.squareup.okhttp3:okhttp")

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

tasks.register('buildSnapshot') {
    SimpleDateFormat format = new SimpleDateFormat("yyyyMMddhhmmss")
    version = version.toString().split("-")[0] + "-snapshot" + format.format(new Date())
    dependsOn("build")
}

tasks.register('generateBuildInfoClass') {
    var outputDir = file("$buildDir/generated/sources/src/main/java/ru/alemakave/mfstock")
    outputs.dir outputDir
    doLast {
        outputDir.exists() || outputDir.mkdirs()

        new File(outputDir, "BuildInfo.java").write("package ru.alemakave.mfstock;\n\npublic class BuildInfo {\n" + "    public static final String BUILD_VERSION = \"" + version + "\";\n}")
    }
}

tasks.register("scanAndShowDeprecated") {
    sourceSets.main.java.files.forEach {
        file -> {
            try (FileInputStream fis = new FileInputStream(file)) {
                int lineNumber = 1
                boolean foundedDeprecatedLine = false
                Map<Integer, String> foundedDeprecated = new TreeMap<>()

                List<String> fileData = new String(fis.readAllBytes()).split("\n")
                boolean findMethodOrField = false
                fileData.forEach{ line ->
                    line = line.strip()
                    if (line.startsWith("@Deprecated")) {
                        foundedDeprecated.put(lineNumber, line)
                        findMethodOrField = true
                        if (!foundedDeprecatedLine) {
                            foundedDeprecated.put(-1, file.toString())
                        }
                        foundedDeprecatedLine = true
                    }

                    if (findMethodOrField) {
                        if (line.startsWith("public") || line.startsWith("private") || line.startsWith("protected")) {
                            foundedDeprecated.put(lineNumber, line)
                            findMethodOrField = false
                        }
                    }

                    lineNumber++
                }

                if (foundedDeprecatedLine) {
                    boolean printedInPrevIterationFileName = false
                    foundedDeprecated.keySet().forEach {
                        key -> {
                            if (key == -1) {
                                println()
                                print(new String(foundedDeprecated.get(key).toString().getBytes(StandardCharsets.UTF_8)))
                                printedInPrevIterationFileName = true
                            } else {
                                if (printedInPrevIterationFileName) {
                                    println(":" + key)
                                    printedInPrevIterationFileName = false
                                }
                                println(key + ": " + new String(foundedDeprecated.get(key).toString().getBytes(StandardCharsets.UTF_8)))
                            }
                        }
                    }
                }
            }
        }
    }
}

sourceSets.main.java.srcDir "$buildDir/generated/sources/src/main/java"
compileJava.dependsOn generateBuildInfoClass